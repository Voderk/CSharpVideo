//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApplication1.MyWCFService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/SmartWCFService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyWCFService.ISmartWCFService")]
    public interface ISmartWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetData", ReplyAction="http://tempuri.org/ISmartWCFService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetData", ReplyAction="http://tempuri.org/ISmartWCFService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ISmartWCFService/GetDataUsingDataContractResponse")]
        WpfApplication1.MyWCFService.CompositeType GetDataUsingDataContract(WpfApplication1.MyWCFService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/ISmartWCFService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WpfApplication1.MyWCFService.CompositeType> GetDataUsingDataContractAsync(WpfApplication1.MyWCFService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectAllActeur", ReplyAction="http://tempuri.org/ISmartWCFService/SelectAllActeurResponse")]
        System.Collections.Generic.List<DTOFilm.ActeurDTO> SelectAllActeur();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectAllActeur", ReplyAction="http://tempuri.org/ISmartWCFService/SelectAllActeurResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.ActeurDTO>> SelectAllActeurAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectAllFilm", ReplyAction="http://tempuri.org/ISmartWCFService/SelectAllFilmResponse")]
        System.Collections.Generic.List<DTOFilm.FilmDTO> SelectAllFilm();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectAllFilm", ReplyAction="http://tempuri.org/ISmartWCFService/SelectAllFilmResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.FilmDTO>> SelectAllFilmAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectAllRealisateur", ReplyAction="http://tempuri.org/ISmartWCFService/SelectAllRealisateurResponse")]
        System.Collections.Generic.List<DTOFilm.RealisateurDTO> SelectAllRealisateur();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectAllRealisateur", ReplyAction="http://tempuri.org/ISmartWCFService/SelectAllRealisateurResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.RealisateurDTO>> SelectAllRealisateurAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectAllGenre", ReplyAction="http://tempuri.org/ISmartWCFService/SelectAllGenreResponse")]
        System.Collections.Generic.List<DTOFilm.GenreDTO> SelectAllGenre();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectAllGenre", ReplyAction="http://tempuri.org/ISmartWCFService/SelectAllGenreResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.GenreDTO>> SelectAllGenreAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectSomeMovies", ReplyAction="http://tempuri.org/ISmartWCFService/SelectSomeMoviesResponse")]
        System.Collections.Generic.List<DTOFilm.FilmDTO> SelectSomeMovies(int number, int skip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectSomeMovies", ReplyAction="http://tempuri.org/ISmartWCFService/SelectSomeMoviesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.FilmDTO>> SelectSomeMoviesAsync(int number, int skip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectFilmID", ReplyAction="http://tempuri.org/ISmartWCFService/SelectFilmIDResponse")]
        DTOFilm.FilmDTO SelectFilmID(int idFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectFilmID", ReplyAction="http://tempuri.org/ISmartWCFService/SelectFilmIDResponse")]
        System.Threading.Tasks.Task<DTOFilm.FilmDTO> SelectFilmIDAsync(int idFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectFilmTitle", ReplyAction="http://tempuri.org/ISmartWCFService/SelectFilmTitleResponse")]
        DTOFilm.FilmDTO SelectFilmTitle(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectFilmTitle", ReplyAction="http://tempuri.org/ISmartWCFService/SelectFilmTitleResponse")]
        System.Threading.Tasks.Task<DTOFilm.FilmDTO> SelectFilmTitleAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectActeurID", ReplyAction="http://tempuri.org/ISmartWCFService/SelectActeurIDResponse")]
        DTOFilm.ActeurDTO SelectActeurID(int IDActor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectActeurID", ReplyAction="http://tempuri.org/ISmartWCFService/SelectActeurIDResponse")]
        System.Threading.Tasks.Task<DTOFilm.ActeurDTO> SelectActeurIDAsync(int IDActor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectActeurName", ReplyAction="http://tempuri.org/ISmartWCFService/SelectActeurNameResponse")]
        DTOFilm.ActeurDTO SelectActeurName(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectActeurName", ReplyAction="http://tempuri.org/ISmartWCFService/SelectActeurNameResponse")]
        System.Threading.Tasks.Task<DTOFilm.ActeurDTO> SelectActeurNameAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectRealisateurID", ReplyAction="http://tempuri.org/ISmartWCFService/SelectRealisateurIDResponse")]
        DTOFilm.RealisateurDTO SelectRealisateurID(int IDRealisateur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectRealisateurID", ReplyAction="http://tempuri.org/ISmartWCFService/SelectRealisateurIDResponse")]
        System.Threading.Tasks.Task<DTOFilm.RealisateurDTO> SelectRealisateurIDAsync(int IDRealisateur);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectRealisateurName", ReplyAction="http://tempuri.org/ISmartWCFService/SelectRealisateurNameResponse")]
        DTOFilm.RealisateurDTO SelectRealisateurName(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectRealisateurName", ReplyAction="http://tempuri.org/ISmartWCFService/SelectRealisateurNameResponse")]
        System.Threading.Tasks.Task<DTOFilm.RealisateurDTO> SelectRealisateurNameAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectGenreID", ReplyAction="http://tempuri.org/ISmartWCFService/SelectGenreIDResponse")]
        DTOFilm.GenreDTO SelectGenreID(int IDGenre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectGenreID", ReplyAction="http://tempuri.org/ISmartWCFService/SelectGenreIDResponse")]
        System.Threading.Tasks.Task<DTOFilm.GenreDTO> SelectGenreIDAsync(int IDGenre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectGenreName", ReplyAction="http://tempuri.org/ISmartWCFService/SelectGenreNameResponse")]
        DTOFilm.GenreDTO SelectGenreName(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectGenreName", ReplyAction="http://tempuri.org/ISmartWCFService/SelectGenreNameResponse")]
        System.Threading.Tasks.Task<DTOFilm.GenreDTO> SelectGenreNameAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectFilmPerActor", ReplyAction="http://tempuri.org/ISmartWCFService/SelectFilmPerActorResponse")]
        System.Collections.Generic.List<DTOFilm.FilmDTO> SelectFilmPerActor(DTOFilm.ActeurDTO actor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectFilmPerActor", ReplyAction="http://tempuri.org/ISmartWCFService/SelectFilmPerActorResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.FilmDTO>> SelectFilmPerActorAsync(DTOFilm.ActeurDTO actor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectFilmPerRealisateur", ReplyAction="http://tempuri.org/ISmartWCFService/SelectFilmPerRealisateurResponse")]
        System.Collections.Generic.List<DTOFilm.FilmDTO> SelectFilmPerRealisateur(DTOFilm.RealisateurDTO realisator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectFilmPerRealisateur", ReplyAction="http://tempuri.org/ISmartWCFService/SelectFilmPerRealisateurResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.FilmDTO>> SelectFilmPerRealisateurAsync(DTOFilm.RealisateurDTO realisator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectFilmPerGenre", ReplyAction="http://tempuri.org/ISmartWCFService/SelectFilmPerGenreResponse")]
        System.Collections.Generic.List<DTOFilm.FilmDTO> SelectFilmPerGenre(DTOFilm.GenreDTO genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectFilmPerGenre", ReplyAction="http://tempuri.org/ISmartWCFService/SelectFilmPerGenreResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.FilmDTO>> SelectFilmPerGenreAsync(DTOFilm.GenreDTO genre);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectCountFilm", ReplyAction="http://tempuri.org/ISmartWCFService/SelectCountFilmResponse")]
        int SelectCountFilm();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectCountFilm", ReplyAction="http://tempuri.org/ISmartWCFService/SelectCountFilmResponse")]
        System.Threading.Tasks.Task<int> SelectCountFilmAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectGenreFilm", ReplyAction="http://tempuri.org/ISmartWCFService/SelectGenreFilmResponse")]
        System.Collections.Generic.List<DTOFilm.GenreDTO> SelectGenreFilm(int IDFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectGenreFilm", ReplyAction="http://tempuri.org/ISmartWCFService/SelectGenreFilmResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.GenreDTO>> SelectGenreFilmAsync(int IDFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectActeurFilm", ReplyAction="http://tempuri.org/ISmartWCFService/SelectActeurFilmResponse")]
        System.Collections.Generic.List<DTOFilm.ActeurDTO> SelectActeurFilm(int IDFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectActeurFilm", ReplyAction="http://tempuri.org/ISmartWCFService/SelectActeurFilmResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.ActeurDTO>> SelectActeurFilmAsync(int IDFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectRealisateurFilm", ReplyAction="http://tempuri.org/ISmartWCFService/SelectRealisateurFilmResponse")]
        System.Collections.Generic.List<DTOFilm.RealisateurDTO> SelectRealisateurFilm(int IDFilm);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISmartWCFService/SelectRealisateurFilm", ReplyAction="http://tempuri.org/ISmartWCFService/SelectRealisateurFilmResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.RealisateurDTO>> SelectRealisateurFilmAsync(int IDFilm);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISmartWCFServiceChannel : WpfApplication1.MyWCFService.ISmartWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SmartWCFServiceClient : System.ServiceModel.ClientBase<WpfApplication1.MyWCFService.ISmartWCFService>, WpfApplication1.MyWCFService.ISmartWCFService {
        
        public SmartWCFServiceClient() {
        }
        
        public SmartWCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SmartWCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartWCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SmartWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WpfApplication1.MyWCFService.CompositeType GetDataUsingDataContract(WpfApplication1.MyWCFService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WpfApplication1.MyWCFService.CompositeType> GetDataUsingDataContractAsync(WpfApplication1.MyWCFService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public System.Collections.Generic.List<DTOFilm.ActeurDTO> SelectAllActeur() {
            return base.Channel.SelectAllActeur();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.ActeurDTO>> SelectAllActeurAsync() {
            return base.Channel.SelectAllActeurAsync();
        }
        
        public System.Collections.Generic.List<DTOFilm.FilmDTO> SelectAllFilm() {
            return base.Channel.SelectAllFilm();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.FilmDTO>> SelectAllFilmAsync() {
            return base.Channel.SelectAllFilmAsync();
        }
        
        public System.Collections.Generic.List<DTOFilm.RealisateurDTO> SelectAllRealisateur() {
            return base.Channel.SelectAllRealisateur();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.RealisateurDTO>> SelectAllRealisateurAsync() {
            return base.Channel.SelectAllRealisateurAsync();
        }
        
        public System.Collections.Generic.List<DTOFilm.GenreDTO> SelectAllGenre() {
            return base.Channel.SelectAllGenre();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.GenreDTO>> SelectAllGenreAsync() {
            return base.Channel.SelectAllGenreAsync();
        }
        
        public System.Collections.Generic.List<DTOFilm.FilmDTO> SelectSomeMovies(int number, int skip) {
            return base.Channel.SelectSomeMovies(number, skip);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.FilmDTO>> SelectSomeMoviesAsync(int number, int skip) {
            return base.Channel.SelectSomeMoviesAsync(number, skip);
        }
        
        public DTOFilm.FilmDTO SelectFilmID(int idFilm) {
            return base.Channel.SelectFilmID(idFilm);
        }
        
        public System.Threading.Tasks.Task<DTOFilm.FilmDTO> SelectFilmIDAsync(int idFilm) {
            return base.Channel.SelectFilmIDAsync(idFilm);
        }
        
        public DTOFilm.FilmDTO SelectFilmTitle(string title) {
            return base.Channel.SelectFilmTitle(title);
        }
        
        public System.Threading.Tasks.Task<DTOFilm.FilmDTO> SelectFilmTitleAsync(string title) {
            return base.Channel.SelectFilmTitleAsync(title);
        }
        
        public DTOFilm.ActeurDTO SelectActeurID(int IDActor) {
            return base.Channel.SelectActeurID(IDActor);
        }
        
        public System.Threading.Tasks.Task<DTOFilm.ActeurDTO> SelectActeurIDAsync(int IDActor) {
            return base.Channel.SelectActeurIDAsync(IDActor);
        }
        
        public DTOFilm.ActeurDTO SelectActeurName(string Name) {
            return base.Channel.SelectActeurName(Name);
        }
        
        public System.Threading.Tasks.Task<DTOFilm.ActeurDTO> SelectActeurNameAsync(string Name) {
            return base.Channel.SelectActeurNameAsync(Name);
        }
        
        public DTOFilm.RealisateurDTO SelectRealisateurID(int IDRealisateur) {
            return base.Channel.SelectRealisateurID(IDRealisateur);
        }
        
        public System.Threading.Tasks.Task<DTOFilm.RealisateurDTO> SelectRealisateurIDAsync(int IDRealisateur) {
            return base.Channel.SelectRealisateurIDAsync(IDRealisateur);
        }
        
        public DTOFilm.RealisateurDTO SelectRealisateurName(string Name) {
            return base.Channel.SelectRealisateurName(Name);
        }
        
        public System.Threading.Tasks.Task<DTOFilm.RealisateurDTO> SelectRealisateurNameAsync(string Name) {
            return base.Channel.SelectRealisateurNameAsync(Name);
        }
        
        public DTOFilm.GenreDTO SelectGenreID(int IDGenre) {
            return base.Channel.SelectGenreID(IDGenre);
        }
        
        public System.Threading.Tasks.Task<DTOFilm.GenreDTO> SelectGenreIDAsync(int IDGenre) {
            return base.Channel.SelectGenreIDAsync(IDGenre);
        }
        
        public DTOFilm.GenreDTO SelectGenreName(string Name) {
            return base.Channel.SelectGenreName(Name);
        }
        
        public System.Threading.Tasks.Task<DTOFilm.GenreDTO> SelectGenreNameAsync(string Name) {
            return base.Channel.SelectGenreNameAsync(Name);
        }
        
        public System.Collections.Generic.List<DTOFilm.FilmDTO> SelectFilmPerActor(DTOFilm.ActeurDTO actor) {
            return base.Channel.SelectFilmPerActor(actor);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.FilmDTO>> SelectFilmPerActorAsync(DTOFilm.ActeurDTO actor) {
            return base.Channel.SelectFilmPerActorAsync(actor);
        }
        
        public System.Collections.Generic.List<DTOFilm.FilmDTO> SelectFilmPerRealisateur(DTOFilm.RealisateurDTO realisator) {
            return base.Channel.SelectFilmPerRealisateur(realisator);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.FilmDTO>> SelectFilmPerRealisateurAsync(DTOFilm.RealisateurDTO realisator) {
            return base.Channel.SelectFilmPerRealisateurAsync(realisator);
        }
        
        public System.Collections.Generic.List<DTOFilm.FilmDTO> SelectFilmPerGenre(DTOFilm.GenreDTO genre) {
            return base.Channel.SelectFilmPerGenre(genre);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.FilmDTO>> SelectFilmPerGenreAsync(DTOFilm.GenreDTO genre) {
            return base.Channel.SelectFilmPerGenreAsync(genre);
        }
        
        public int SelectCountFilm() {
            return base.Channel.SelectCountFilm();
        }
        
        public System.Threading.Tasks.Task<int> SelectCountFilmAsync() {
            return base.Channel.SelectCountFilmAsync();
        }
        
        public System.Collections.Generic.List<DTOFilm.GenreDTO> SelectGenreFilm(int IDFilm) {
            return base.Channel.SelectGenreFilm(IDFilm);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.GenreDTO>> SelectGenreFilmAsync(int IDFilm) {
            return base.Channel.SelectGenreFilmAsync(IDFilm);
        }
        
        public System.Collections.Generic.List<DTOFilm.ActeurDTO> SelectActeurFilm(int IDFilm) {
            return base.Channel.SelectActeurFilm(IDFilm);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.ActeurDTO>> SelectActeurFilmAsync(int IDFilm) {
            return base.Channel.SelectActeurFilmAsync(IDFilm);
        }
        
        public System.Collections.Generic.List<DTOFilm.RealisateurDTO> SelectRealisateurFilm(int IDFilm) {
            return base.Channel.SelectRealisateurFilm(IDFilm);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DTOFilm.RealisateurDTO>> SelectRealisateurFilmAsync(int IDFilm) {
            return base.Channel.SelectRealisateurFilmAsync(IDFilm);
        }
    }
}
